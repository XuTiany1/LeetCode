#############################################################################################################################
==================================================== NAME ====================================================
#############################################################################################################################

INPUT: 
    1D array that is already sorted in non-decreasing order: numbers
    


PURPOSE:
Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, 
find two numbers such that they add up to a specific target number. 
Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

The tests are generated such that there is exactly one solution. 
You may not use the same element twice.

Your solution must use only constant extra space.




OUTPUT:
    int: index1, index2 



Example:
Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].


Input: numbers = [2,3,4], target = 6
Output: [1,3]
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].



Input: numbers = [-1,0], target = -1
Output: [1,2]
Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].



MY SOLUTION:

    def twoSum(self, numbers: List[int], target: int) -> List[int]:

        SET pointer_a = 0
        SET pointer_b = len(numbers) - 1

        SET curr_sum = numbers[pointer_a] + numbers[pointer_b]

        
        WHILE (pointer_a < pointer_b):

            IF (curr_sum == target):
            THEN
                RETURN [pointer_a + 1, pointer_b + 1]
        
            ELSE IF (curr_sum >= target):
            THEN
                pointer_b --
            
            ELSE
                pointer_a ++
            
            ENDIF

        ENDWHILE

    

------------------------------------------------------------------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ OPTIMAL SOLUTION $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 
------------------------------------------------------------------------------------------------