#############################################################################################################################
==================================================== NAME ====================================================
#############################################################################################################################

INPUT: 
    array prices where prices[i] is the price of a given stock on the ith day.



OUTPUT:
    Return the maximum profit you can achieve from this transaction. 
    If you cannot achieve any profit, return 0.



Example:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.


Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.



MY SOLUTION:

    def maxProfit(self, prices: List[int]) -> int:

        SET min_price = infinity
        SET max_profit = 0

        FOR every curr_price in prices:

            IF curr_price < min_price:
            THEN
                SET min_price = curr_price

            ELSE IF (curr_price - min_price) > max_profit:
            THEN
                SET max_profit = (curr_price - min_price)
        
        ENDFOR

        RETURN max_profit








    

------------------------------------------------------------------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ OPTIMAL SOLUTION $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 
------------------------------------------------------------------------------------------------