#############################################################################################################################
==================================================== 27 - REMOVE ELEMENT ====================================================
#############################################################################################################################

INPUT: 
        An integer array nums
        An integer val

PURPOSE:
        Remove all occurrences of val in nums in-place.
        The order of the elements may be changed. 
        Then return the number of elements in nums which are not equal to val.

OUTPUT:
        The number of elements in nums which are not equal to val, k


Example:
Input: nums = [0,1,2,2,3,0,4,2], val = 2
Output: 5, nums = [0,1,4,0,3,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.
Note that the five elements can be returned in any order.
It does not matter what you leave beyond the returned k (hence they are underscores).


MY SOLUTION:

FUNCTION removeElement(nums: List[int], val: int) -> int:

    SET good_value_list to empty
    
    FOR every integer i in range of nums' length

        IF (nums[i] NOT EQUAL to val)
            THEN 
                APPEND nums[i] to good_value_list
    
    FOR every good_value in good_value_list
        
        SET nums[count] to good_value

    RETURN (nums.length - good_value_list.length)
    

------------------------------------------------------------------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ OPTIMAL SOLUTION $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 
------------------------------------------------------------------------------------------------
This solution uses two pointers: one for iterating through the array and another for keeping track of the position to overwrite with non-val elements. 
This approach ensures the elements are removed in-place and the time complexity is O(n).

FUNCTION removeElement(nums: List[int], val: int) -> int:

    SET i to 0
    
    FOR every integer j in range of nums' length

        IF nums[j] NOT EQUAL to val
            SET nums[i] to nums[j]
            INCREMENT i by 1
    
    RETURN i


























































