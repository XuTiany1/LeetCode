

#############################################################################################################################
================================================== 88 - MERGE SORTED ARRAY ==================================================
#############################################################################################################################

INPUT: 
        Two integer arrays sorted in non-decreasing order: nums1, nums2 
        Two integers m, n representing the number of elemnts in nums1, nums2 

PURPOSE:
        Final sorted array should be stored inside the array nums1 (which will have length m+n)

OUTPUT:
        NONE


Example:
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.



def merge(self, nums1: List[int], m: int, nums2:List[int], n:int) -> None:

    IF (m == 0)
        THEN copy nums2 values to nums1
        RETURN
    ELIF (n equals to zero)
        RETURN 

    INIT nums1_copy_array = array of size m

    FOR every iteration i within size m:
        SET temp_array[i] to nums1[i]

    INIT counter to 0
    INIT list_one_pointer to 0
    INIT list_two_pointer to 0

    WHILE (list_one_pointer < m) AND (list_two_pointer < n)

        IF(nums1_copy_array[list_one_pointer] > nums2[list_two_pointer])

            THEN nums1[counter] = nums1_copy_array[list_one_pointer]

            INCREMENT list_one_pointer

        ELSE

            nums1[counter] = nums2[list_two_pointer]

            INCREMENT list_two_pointer
        
        INCREMENT counter

    IF (list_one_pointer equals to m)
        
        THEN copy the rest of nums2 into nums1
    
    ELIF (list_two_pointer equals to n)

        THEN copy the rest of nums1_copy_array into nums1

    RETURN 






































































































































































