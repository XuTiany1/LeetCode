#############################################################################################################################
================================================== 88 - MERGE SORTED ARRAY ==================================================
#############################################################################################################################

INPUT: 
        Two integer arrays sorted in non-decreasing order: nums1, nums2 
        Two integers m, n representing the number of elemnts in nums1, nums2 

PURPOSE:
        Final sorted array should be stored inside the array nums1 (which will have length m+n)

OUTPUT:
        NONE


Example:
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.



FUNCTION merge(nums1, m, nums2, n)

    IF m == 0
        COPY nums2 values to nums1
        RETURN
    ELSE IF n == 0
        RETURN

    SET p1 = m - 1
    SET p2 = n - 1
    SET p = m + n - 1

    WHILE p1 >= 0 AND p2 >= 0
        IF nums1[p1] > nums2[p2]
            nums1[p] = nums1[p1]
            DECREMENT p1
        ELSE
            nums1[p] = nums2[p2]
            DECREMENT p2
        DECREMENT p

    WHILE p2 >= 0
        nums1[p] = nums2[p2]
        DECREMENT p2
        DECREMENT p

    RETURN

EXPLANATION:
    This works because -> imagine the two possible cases:
            CASE 1: we exhaust nums1 first, then we simply copy paste nums2
            CASE 2: we exhaust nums2 first, then the smallest values are nums1, which are already in non-decreasing order






































































































































































